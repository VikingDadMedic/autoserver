engine: 0
name: Example API
collections:
  pets:
    description: Cute animal
    database: memory
    authorize:
      model:
        id:
          _neq: '90'
        created_time:
          _eq: model.created_time
      command:
        _in: (['find', 'delete', 'create', 'upsert', 'patch'])
    $custom: anything
    #$second_custom:
    #  $ref: '#/collections/pets/$custom'
    attributes:
      id:
        description: Unique identifier of a pet
      name:
        type: string
        description: How to call a pet
        validate:
          required: true
          oneOf:
          - pattern: '^[a-zA-Z]+$'
          - pattern: '[0-9]+$'
          allOf:
          - not:
              pattern: '^__'
          - not:
              pattern: '^[0-9]'
          anyOf:
          - pattern: '[a-z]'
          - pattern: '[A-Z]'
          - pattern: '[0-9]'
          if:
            pattern: '^super'
          then:
            pattern: '[a-z]'
          else:
            pattern: '[A-Z]'
        $custom: anything
      weight:
        type: number
        description: Corrolated to how much a pet has eaten
        deprecation_reason: Let's stop measuring pet's weight
        default: 15
        alias: old_weight_name
        validate:
          minimum: 0.5
          maximum: 30
          exclusiveMinimum: 0.5
          exclusiveMaximum: 30
          multipleOf: 0.000001
          $is_not_equal: 10
      is_overweight:
        type: boolean
        description: Has the pet being eating too much?
        default: false
        validate:
          const: false
      photo_urls:
        type: string[]
        description: Sweet pictures of a pet
        examples:
        - http://www.photos.org/1.jpg
        - http://www.photos.org/3.jpg
        validate:
          required: true
      skills:
        type: pet_skills
      tags:
        type: string[]
        description: Tags applying to this pet
        default: []
        validate:
          items:
            minLength: 2
            maxLength: 200
            pattern: '^[a-zA-Z0-9 ]+$'
            enum: [suspended, adorable]
          if:
            minItems: 10
          then:
            contains:
              enum: [suspended]
          additionalItems: false
          minItems: 0
          maxItems: 30
          uniqueItems: true
      status:
        description: Has this pet been adopted
        value: '(typeof value === "string" ? value.toLowerCase() + " " + model.weight : value)'
        default:
          $ref: default_value.js
      creator_key:
        description: Key of the user that created this pet
        value: (String($more_recursive_func()))
      best_friend:
        type: pets
        description: This pet's best friend
        validate:
          dependencies: [friends]
      friends:
        type: pets[]
        description: This pet's friends
        validate:
          required: true
      owners:
        type: owners[]
      birth_date:
        default: ($birth_date)
        validate:
          format: date
          formatMinimum: 2000-01-01
          formatExclusiveMinimum: true
          formatMaximum: 2100-01-01
          formatExclusiveMaximum: false
  $ref: other_collections.yml
  default: {}
authorize:
- command:
    _in: [find, delete]
- command:
    _in: [find, create, upsert, patch]
variables:
  $my_math_func: ((arg1 * arg2) + (arg3 * arg4))
  $example_function: '($my_math_func(1, 10, 100, 2) +
    $my_other_math_func({ numA: 1, numB: 10, numC: 100, numD: 2 }))'
  $recursive_func: ($example_function())
  $more_recursive_func: ($recursive_func() + $constants.TestConstant +
    $string.titleize(rpc))
  $my_other_math_func:
    $ref: math_func.js
  $birth_date: '2005-01-01'
  $constants:
    $ref: constants.json
  $string:
    $ref: underscore.string.node
  $lodash:
    $ref: lodash.node
plugins:
- plugin:
    $ref: test_plugin.js
  opts:
    example_option: true
  enabled: true
- plugin: author
  opts:
    currentuser: '(({ id: "10" }))'
    collection: owners
validation:
  $is_not_equal:
    test: (value !== arg)
    message: (`must not be equal to ${arg}`)
    type: number
operators:
  __power:
    apply: (value ** (arg || 1))
    attribute: [number, integer]
    argument: [number, integer, empty]
log:
  level: info
databases:
  memory:
    data:
      $ref: memory_data.yml
$custom: anything
