extends:
- standard

root: true

# Most parserOptions are implied by feross/standard
parserOptions:
  ecmaVersion: 9
  sourceType: script

# feross/standard implies "node" and "es6"
env:
  mocha: true

# feross/standard implies "import", "node", "promise" and "standard"
plugins:
- eslint-comments
- filenames
- fp
- html
- markdown
- unicorn

# Differences from feross/standard:
#  - end with semicolons
#  - use trailing commas
# There are also some extra restrictions:
#  - enforcing a functional style:
#     - avoid complex|big functions|files
#     - no OOP
#     - immutability, e.g. can only assign during initialization
#     - pure functions, e.g. avoid using global state, or shadowing it
#     - no for|while loops, no complex if|else branches, no switch
#  - prefer named arguments over positional arguments
#  - prefer async/await over alternatives
#  - avoid overriding ESLint with comments
#  - diverse stylistic rules
rules:
  # Differences from feross/standard
  semi:
  - 2
  - always
  comma-dangle:
  - 2
  - always-multiline
  # feross/standard does not check arguments for unused-vars
  no-unused-vars:
  - 2
  - {}

  # Comments
  no-inline-comments: 2
  multiline-comment-style:
  - 2
  - separate-lines
  line-comment-position: 2
  lines-around-comment: 2
  capitalized-comments:
  - 2
  - always
  - ignoreConsecutiveComments: true

  # ESLint comments
  eslint-comments/disable-enable-pair: 2
  eslint-comments/no-unused-enable: 2
  eslint-comments/no-duplicate-disable: 2
  eslint-comments/no-unused-disable: 2
  eslint-comments/no-unlimited-disable: 2
  eslint-comments/no-aggregating-enable: 2
  eslint-comments/no-use:
  - 2
  - allow:
    - 'eslint-disable-next-line'
    - 'eslint-disable'
    - 'eslint-enable'
  unicorn/no-abusive-eslint-disable: 2

  # JSDoc
#  valid-jsdoc: 2
#  require-jsdoc:
#  - 2
#  - require:
#      FunctionDeclaration: true
#      MethodDefinition: true
#      ClassDeclaration: true
  strict: 2

  # Long statements
  newline-per-chained-call: 2

  # Blank lines
  padding-line-between-statements:
  - 2
  - blankLine: always
    prev: [multiline-block-like, directive]
    next: '*'
  - blankLine: always
    prev: '*'
    next: multiline-block-like
  lines-between-class-members: 2

  # Whitespaces
  linebreak-style: 2

  # Braces
  nonblock-statement-body-position: 2

  # Spaces
  object-curly-spacing:
  - 2
  - always
  array-bracket-spacing: 2
  computed-property-spacing: 2
  switch-colon-spacing: 2

  # Semicolons
  semi-style: 2
  no-extra-semi: 2

  # Statements
  no-empty:
  - 2
  - allowEmptyCatch: true

  # Complexity
  max-len:
  - 2
  - code: 80
    tabWidth: 2
    ignoreUrls: true
    ignoreStrings: true
    ignoreTemplateLiterals: true
    ignoreRegExpLiterals: true
  max-lines:
  - 2
  - max: 90
    skipBlankLines: true
    skipComments: true
  max-statements:
  - 2
  - 10
  max-statements-per-line:
  - 2
  - max: 2
  import/max-dependencies: 2
  complexity:
  - 2
  - 4
  max-depth:
  - 2
  - 1
  max-nested-callbacks:
  - 2
  - 1

  # Referencing
  no-undef:
  - 2
  - typeof: true
  no-shadow:
  - 2
  - builtinGlobals: true
    hoist: all

  # Declarations
  block-scoped-var: 2
  no-var: 2
  fp/no-let: 2
  import/no-mutable-exports: 2
  prefer-const: 2
  no-implicit-globals: 2
  one-var-declaration-per-line: 2
  vars-on-top: 2
  sort-vars: 2
  no-magic-numbers:
  - 2
  - ignore: [-2, -1, 0, 1, 2]
    enforceConst: true

  # Assignments
  init-declarations: 2
  no-plusplus: 2
  operator-assignment: 2
  no-multi-assign: 2
  no-param-reassign:
  - 2
  - props: true
  fp/no-mutation:
  - 2
  - commonjs: true
  fp/no-delete: 2
  import/no-unassigned-import: 2
  fp/no-mutating-assign: 2
  fp/no-mutating-methods: 2

  # Naming
  id-length:
  - 2
  - max: 24
  id-match:
  - 2
  - '^[A-Za-z0-9_]+$'
  - onlyDeclarations: true
  no-underscore-dangle:
  - 2
  - enforceInMethodNames: true

  # Typecasting
  no-implicit-coercion: 2
  unicorn/explicit-length-check:
  - 2
  - non-zero: not-equal
  unicorn/new-for-builtins: 2
  fp/no-valueof-field: 2

  # Tests
  unicorn/no-array-instanceof: 2
  no-negated-condition: 2
  no-nested-ternary: 2

  # Structures
  no-lonely-if: 2
  no-else-return:
  - 2
  - allowElseIf: false
  for-direction: 2
  guard-for-in: 2
  fp/no-loops: 2

  # Switch
  no-restricted-syntax:
  - 2
  - SwitchStatement
  default-case: 2
  no-case-declarations: 2

  # Labels
  no-unused-labels: 2
  no-extra-label: 2

  # Exceptions
  unicorn/throw-new-error: 2
  unicorn/catch-error-name:
  - 2
  - name: error
  no-catch-shadow: 2
  fp/no-throw: 2
  unicorn/prefer-type-error: 2
  unicorn/custom-error-definition: 2

  # Functions
  func-style: 2
  no-loop-func: 2
  func-names:
  - 2
  - as-needed
  func-name-matching: 2
  function-paren-newline: 2
  prefer-arrow-callback:
  - 2
  - allowNamedFunctions: true
  arrow-body-style: 2
  arrow-parens:
  - 2
  - as-needed
  no-confusing-arrow:
  -  2
  - allowParens: true
  max-params: 2
  prefer-spread: 2
  prefer-rest-params: 2
  fp/no-arguments: 2
  require-yield: 2
  getter-return: 2
  fp/no-get-set: 2
  fp/no-proxy: 2
  no-empty-function: 2

  # Objects
  dot-notation: 2
  quote-props:
  - 2
  - as-needed
  object-shorthand: 2
  prefer-destructuring: 2

  # Inheritance
  no-invalid-this: 2
  class-methods-use-this: 2
  consistent-this: 2
  no-prototype-builtins: 2
  fp/no-class: 2
  fp/no-this: 2

  # Arrays
  array-bracket-newline:
  - 2
  - consistent
  array-callback-return: 2

  # String
  no-useless-concat: 2
  prefer-template: 2
  unicorn/prefer-starts-ends-with: 2
  unicorn/no-hex-escape: 2
  unicorn/number-literal-case: 2
  unicorn/escape-case: 2

  # RegExps
  wrap-regex: 2
  unicorn/regex-shorthand: 2

  # Number
  prefer-numeric-literals: 2
  radix:
  - 2
  - as-needed
  no-bitwise: 2

  # Async
  callback-return: 2
  require-await: 2
  no-await-in-loop: 2
  no-sync: 2
  promise/catch-or-return: 2
  promise/always-return: 2
  promise/no-return-wrap: 2
  promise/no-nesting: 2
  promise/no-promise-in-callback: 2
  promise/no-callback-in-promise: 2
  promise/avoid-new: 2
  promise/prefer-await-to-then: 2
  promise/prefer-await-to-callbacks: 2

  # Modules
  import/no-unresolved:
  - 2
  - commonjs: true
  node/no-missing-require:
  - 2
  - allowModules:
    - apiengine
  node/no-unpublished-require:
  - 2
  - allowModules:
    - gulp
    - gulp-eslint
    - gulp-jscpd
    - gulp-plumber
  node/no-missing-import: 2
  node/no-unpublished-import: 2
  import/named: 2
  import/default: 2
  import/namespace: 2
  import/no-named-as-default: 2
  import/no-named-as-default-member: 2
  import/no-namespace: 2
  import/no-named-default: 2
  import/no-anonymous-default-export: 2
  node/exports-style:
  - 2
  - module.exports
  import/extensions: 2
  import/no-absolute-path: 2
  import/no-internal-modules: 2
  no-duplicate-imports:
  - 2
  - includeExports: true
  import/no-extraneous-dependencies: 2
  node/no-extraneous-require: 2
  node/no-extraneous-import: 2
  sort-imports:
  - 2
  - ignoreMemberSort: true
  no-mixed-requires: 2
  import/order:
  - 2
  - newlines-between: always
  import/newline-after-import: 2
  import/unambiguous: 2
  import/no-dynamic-require: 2
#  import/no-commonjs: 2
  import/no-amd: 2
  import/no-deprecated: 2
  unicorn/import-index: 2

  # Filenames
  filenames/match-regex:
  - 2
  - '^[a-zA-Z_][a-zA-Z0-9_]+$'
  filenames/match-exported:
  - 2
  - snake
  unicorn/filename-case:
  - 2
  - case: snakeCase

  # Binary
  node/no-unpublished-bin: 2
  node/shebang: 2

  # Compatibility
  node/no-unsupported-features:
  - 2
  - version: 8

  # Blacklist
  no-restricted-globals:
  - 2
  - global
  - GLOBAL
  - console
  - exports

  # To avoid
  no-void: 2
  no-continue: 2
  no-console: 2
  fp/no-events: 2
  no-buffer-constructor: 2
  unicorn/no-new-buffer: 2
  no-process-env: 2
  no-script-url: 2
  no-alert: 2
  no-process-exit: 2
  unicorn/no-process-exit: 2

  # Those rules should be picked for a fully functional codebase.
  # However, we want to allow throwing exceptions, because monads would
  # be too verbose.
#  fp/no-nil: 2
#  fp/no-unused-expression:
#  - 2
#  - allowUseStrict: true
#  consistent-return: 2

  # Our newlines rules for arrays, objects and ternaries take into
  # account line width, which is not possible with those ESLint rules
#  array-element-newline: 2
#  object-curly-newline: 2
#  multiline-ternary: 2
#  implicit-arrow-linebreak: 2

  # This is in conflict with no-useless-escape rule with RegExps like /=/
# no-div-regex: 2

  # Those rules go against the codebase convention of using index.js files
  # that require siblings, and exporting|requiring named objects.
#  filenames/no-index: 2
#  global-require: 2
#  import/prefer-default-export: 2

  # We sort object keys by type, but by name
#  sort-keys: 2

  # We want rest parameters to allow passing around arguments unchanged
#  fp/no-rest-parameters: 2

  # We allow ternaries, they can make code look cleaner
#  no-ternary: 2

  # undefined is a valid value in our codebase, distinct from null
#  no-undefined: 2

  # We allow TODO comments
#  no-warning-comments: 2

  # We want to allow Promise.all() and Promise.race()
#  promise/no-native: 2

  # This rule encourages creating functions where it is not needed
#  unicorn/no-fn-reference-in-iterator: 2

  # Rules for client-side code only
#  import/no-nodejs-modules: 2

  # React
#  react/*: 2
#  jsx-quotes: 2

  # No use for those rules
#  id-blacklist: 2
#  no-restricted-imports: 2
#  no-restricted-modules: 2
#  no-restricted-properties: 2
#  import/no-restricted-paths: 2
settings:
  import/core-modules:
  - apiengine
  node/allowModules:
  - apiengine
