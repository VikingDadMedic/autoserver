# IDL file version, required
engine: api-engine 1.0.0
# List of models
models:
  # Name of the model, used in routes, e.g. REST endpoints or GraphQL actions
  # Must only be lowercase ASCII letters, digits or underscore.
  # Cannot start with one digit or two underscores.
  pet:
    description: Cute animal
    # Allowed commands for this model.
    commands: [create, read, update, delete]
    # Custom property
    x-custom: anything
    attributes:
      id:
        description: Unique identifier of a pet
      name:
        type: string
        description: How to call a pet
        validate:
          required: true
          # Combinators JSON schema validation keywords
          oneOf:
          - pattern: '^[a-zA-Z]+$'
          - pattern: '[0-9]+$'
          allOf:
          - not:
              pattern: '^__'
          - not:
              pattern: '^[0-9]'
          anyOf:
          - pattern: '[a-z]'
          - pattern: '[A-Z]'
          - pattern: '[0-9]'
          if:
            pattern: '^super'
          then:
            pattern: '[a-z]'
          else:
            pattern: '[A-Z]'
        # Custom property
        x-custom: anything
      # Attributes follow the same naming restrictions as models
      weight:
        type: number
        # Description automatically used in documentation
        description: Corrolated to how much a pet has eaten
        # Deprecation is automatically used in documentation,
        # and gives warning messages
        deprecation_reason: Let's stop measuring pet's weight
        default: 15
        # Possible aliases for that attribute's name
        alias: old_weight_name
        validate:
          # Number-specific JSON schema validation keywords
          minimum: 0.5
          maximum: 30
          exclusiveMinimum: 0.5
          exclusiveMaximum: 30
          # Can use floats
          multipleOf: 0.000001
          # Custom validation
          IsNotEqual: 10
      is_overweight:
        type: boolean
        description: Has the pet being eating too much?
        default: false
        validate:
          # This JSON schema validation keyword can be applied to any type
          const: false
      photo_urls:
        # Type defaults to 'string'
        type: string[]
        description: Sweet pictures of a pet
        validate:
          required: true
      skills:
        type: pet_skills
      tags:
        type: string[]
        description: Tags applying to this pet
        default: []
        validate:
          # Array-specific JSON schema validation keywords
          items:
            # String-specific JSON schema validation keywords
            minLength: 2
            maxLength: 200
            pattern: '^[a-zA-Z0-9 ]+$'
            # This JSON schema validation keyword can be applied to any type
            enum: [suspended, adorable]
          if:
            minItems: 10
          then:
            contains:
              enum: [suspended]
          additionalItems: false
          minItems: 0
          maxItems: 30
          uniqueItems: true
      status:
        description: Has this pet been adopted
        # Applies transformations: status will be lowercased on write
        # Those are mapping functions applies on input for a particular
        # attribute.
        # They can be any static value or JSL, including using $ or $$
        # Can be the `value` directly as a shortcut,
        # and does not have to be an array.
        transform:
        - value: ($.toLowerCase() + " " + $$.weight)
          # Optional test function. If false, the transform is not applied
          # Note that without `test`, $ can be undefined in `value`.
          test: (typeof $ === 'string')
          # In order to use $$.ATTRIBUTE, attributes must be specified here.
          # If those attributes have transforms, they will be calculated first.
          # This implies no circular dependencies should be defined.
          using: weight
        # Applied default values, on input or output
        default:
          $ref: default_value.js
      creator_key:
        description: Key of the user that created this pet
        # This means trying to write this attribute will be a noop,
        # but server might still return it.
        readOnly: true
        # compute is exactly like `transform`, except it is never persisted
        # in the database, while present in response. This implies:
        #  - JSL cannot use $ nor $$.CURRENT_ATTRIBUTE
        #  - `readOnly` true is implied
        #  - cannot be used together with any property that imply the attribute
        #    should be persisted, including `transform`, `default` or input
        #    validation
        compute: (String(moreRecursiveFunc()))
      best_friend:
        # This means this attribute is an instance of the `pet` model,
        # i.e. a foreign key
        # References can be recursive, e.g. here `pet` is the current model
        # Will actually copy the model's `id` property definition
        # (in case of conflict, current definition has priority)
        # Those "sub-models" to perform nested actions
        type: pet
        description: This pet's best friend
        validate:
          dependencies: [friends]
      # Array of foreign keys (i.e. n-1, 1-n and n-n relationships)
      # can also be specified
      friends:
        type: pet[]
        description: This pet's friends
        validate:
          required: true
      owners:
        type: owner[]
      birth_date:
        default: (birthDate)
        validate:
          # The following JSON schema validation keywords can be applied to
          # any type, although they are usually for strings
          format: date
          formatMinimum: 2000-01-01
          formatExclusiveMinimum: true
          formatMaximum: 2100-01-01
          formatExclusiveMinimum: false
  owner:
    # It is possible to reference/include local files or remote files (HTTP[S])
    # using standard JSON reference syntax
    # Circular references are supported
    # Included files will be merged with sibling properties
    $ref: owner.schema.yml
  pet_skills:
    $ref: pet_skills.schema.yml
  # Default values for each model
  default:
    commands: [create, read, update, delete]
# Helpers can be an array of objects (which are merged), or a single object
helpers:
  # Helpers use function/JSL themselves
  - myMathFunc: (($1 * $2) + ($3 * $4))
    exampleFunction: '(myMathFunc(1, 10, 100, 2) + myOtherMathFunc({ numA: 1, numB: 10, numC: 100, numD: 2 }))'
    recursive_func: (exampleFunction())
    # Since this function uses $OPERATION, caller must have access to this
    # parameter
    moreRecursiveFunc: (recursive_func() + TestConstant + $OPERATION)
    # Constant
    birthDate:
      value: 2005-01-01
      # By default, helpers are not available to arg.filter|data
      # But they can be exposed with the following property
      exposed: true
    # One can require JavaScript files (Node.js)
    myOtherMathFunc:
      value:
        $ref: math_func.js
      # Pass JSL parameters as first argument to non-inline function
      useParams: true
    # Dummy constant
    user: '(({ id: "1" }))'
  # One can require entire libraries.
  - $ref: underscore.string
  - $ref: lodash
  # One can require sets of constants
  - $ref: constants.json
# Plugins are functions that take `idl` as input, and returns a modified
# IDL as output.
# Use cases can be: adding a attribute to each model,
# extending core functionalities, etc.
# The system adds by default some builtin plugins, which can be disabled.
plugins:
  - plugin:
      $ref: test_plugin.js
    # Passed to the plugin function
    opts:
      exampleOption: true
    # True by default, more useful for builtin plugins
    # enabled: true
  # Builtin plugins are specified as a string, and run by default
  # - plugin: timestamp
  - plugin: author
    # Defines how to retrieve current user, so it can be used by updated_by
    # and created_by attributes
    opts:
      # user: (user())
      model: owner
# Custom validation keywords, to use on models' attributes
validation:
  IsNotEqual:
    # Validation function.
    # Must return true for success, anything else for failure
    # Must be a function/JSL
    test: ($ !== $EXPECTED)
    # Error message
    # Can be a function/JSL
    message: (`must not be equal to ${$EXPECTED}`)
    # Can restrict when the validation will be applied, using JSON schema types
    type: number
# Custom property
x-custom: anything
