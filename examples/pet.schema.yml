### IDL FILE ###
# This file describes how the API should operate.
# It is purposely overly complex, as this example file aims to demonstrate all available features.
# A real production file should be much more concise.
# It is based on JSON schema v6 syntax, with some extra attributes
# Using this file, the API will automatically generate:
#  - HTTP server: body/query handling
#  - GraphQL server: endpoint, introspection, debugger, schema printing
#  - CRUD methods: find, create, replace, update, upsert, delete. On a single model or several.
#  - CRUD arguments: filtering, sorting, selecting
#  - nested operations, populating
#  - input and output validation
#  - error handling
#  - logging
#  - routing

# IDL file version, required
$schema: tag:apiengine,2017:v1.0.0
# List of models
models:
  # Name of the model, used in routes, e.g. REST endpoints or GraphQL methods
  # Must only be lowercase ASCII letters, digits or underscore. Cannot start with one digit or two underscores.
  pet:
    type: object
    description: Cute animal
    # `Ã¬d` should always be required, and specified
    required: [id, name, photo_urls, friends]
    # Allowed operations for this model.
    # Defaults to top-level `operations` key (see it for further explanations)
    operations: [find, create, replace, update, upsert, deleteOne]
    # Custom property
    x-custom: anything
    properties:
      id:
        # Required for the moment. Possible values: string, number, integer, boolean,
        # For the moment, cannot be an array
        type: string
        description: Unique identifier of a pet
      name:
        type: string
        description: How to call a pet
        default: default does not work if required
        # Custom property
        x-custom: anything
        # Combinators JSON schema validation keywords
        oneOf:
        - pattern: '^[a-zA-Z]+$'
        - pattern: '[0-9]+$'
        allOf:
        - not:
            pattern: '^__'
        - not:
            pattern: '^[0-9]'
        anyOf:
        - pattern: '[a-z]'
        - pattern: '[A-Z]'
        - pattern: '[0-9]'
        if:
          pattern: '^super'
        then:
          pattern: '[a-z]'
        else:
          pattern: '[A-Z]'
      # Attributes follow the same naming restrictions as models
      weight:
        type: number
        # Description automatically used in documentation
        description: Corrolated to how much a pet has eaten
        # Deprecation is automatically used in documentation, and gives warning messages
        deprecated: Let's stop measuring pet's weight
        default: 15
        # Number-specific JSON schema validation keywords
        minimum: 0.5
        maximum: 30
        exclusiveMinimum: 0.5
        exclusiveMaximum: 30
        # Can use floats
        multipleOf: 0.000001
      is_overweight:
        type: boolean
        description: Has the pet being eating too much?
        # This JSON schema validation keyword can be applied to any type
        const: false
        default: false
      photo_urls:
        type: array
        description: Sweet pictures of a pet
        # This is how to specify an array's elements
        items:
          type: string
      # This attribute is an object not pointing to a model (does not contain `model` key)
      attributes:
        type: object
        description: Attributes of a pet
        # Object-specific JSON schema validation keywords
        required: [intelligence]
        minProperties: 1
        maxProperties: 10
        patternProperties:
          '^__': false
        additionalProperties:
          type: integer
        propertyNames:
          pattern: '^[a-z]+$'
        dependencies:
          height: [width]
          is_big:
            maxProperties: 100
        properties:
          age:
            type: integer
            description: How old is the pet
            default: 1
          intelligence:
            type: integer
            description: How smart is the pet
            minimum:
              # Allows refering to a runtime value, i.e. here `age` must be lesser than `intelligence`
              $data: '1/age'
        default: {}
      tags:
        type: array
        description: Tags applying to this pet
        # Array-specific JSON schema validation keywords
        items:
          type: string
          # String-specific JSON schema validation keywords
          minLength: 2
          maxLength: 200
          pattern: '^[a-zA-Z0-9 ]+$'
        contains:
          # This JSON schema validation keyword can be applied to any type
          enum: [suspended, adorable]
        minItems: 0
        maxItems: 30
        uniqueItems: true
        default: []
      status:
        type: string
        description: Has this pet been adopted
        default: adopted
      best_friend:
        # This means this attribute is an instance of the `pet` model, i.e. a foreign key
        # References can be recursive, e.g. here `pet` is the current model
        # Will actually copy the model's `id` property definition (in case of conflict, current definition has priority)
        # Those "sub-models" to perform nested operations
        model: pet
        description: This pet's best friend
      # Array of foreign keys (i.e. n-1, 1-n and n-n relationships) can also be specified
      friends:
        type: array
        description: This pet's friends
        items:
          model: pet
      owners:
        type: array
        items:
          model: owner
      birth_date:
        type: string
        # The following JSON schema validation keywords can be applied to any type, although they are usually for strings
        format: date
        formatMinimum: '2000-01-01'
        formatExclusiveMinimum: true
        formatMaximum: '2100-01-01'
        formatExclusiveMinimum: false
  owner:
    # It is possible to reference/include local files or remote files (HTTP[S]) using standard JSON reference syntax
    # Circular references are supported
    # Included files will be merged with sibling properties
    $ref: examples/owner.schema.yml
# Default `operations` values for each model
# If unspecified, is all operations but deleteMany
# Operations can be:
#   - find: retrieve an element, similar to REST's GET
#   - create: create an element, similar to REST's POST. `id` can be specified by client, or set by server.
#   - replace: completely replace an element, similar to REST's PUT
#   - update: partially update an element, similar to REST's PATCH
#   - upsert: if element exists, like "replace". Otherwise, like "create"
#   - delete: delete an element, similar to REST's DELETE
# Each operation has two versions:
#   - singular: e.g. `findOne`, similar to REST's GET /models/ID
#   - plural: e.g. `findMany`, similar to REST's GET /models/
# By default, more singular and plural are allowed. To restrict to singular only, add `One`, e.g. `findOne`
# Operations can use the following arguments:
#   - `id`:
#      - in all *One operations. Required by each of them, except deleteOne
#      - conceptually implicitely added to any `data` or `filter` argument
#   - `ids`:
#      - in all *Many operations. Required by replaceMany and upsertMany
#      - must be an array
#      - conceptually implicitely added to any `data` (i.e. must have same length) or `filter` argument
#   - `data`:
#      - in update, upsert, replace or create operations. Required by each of them
#      - must be an array of object for all upsertMany, replaceMany and createMany. Must be an object otherwise
#      - contains the entity to modify or create
#   - `filter`:
#      - in find, delete and update operations. Never required
#      - must be an object, whose keys are named after the models attributes
#      - used as a query filter, e.g. deleteMany { filter: { name: 'example' } } remove all entities with `name` 'example'
#   - `order_by`
#      - in all operations. Never required
#      - must be a comma-separated list of attributes, optionally prefixed by + or -, e.g. 'name-,id'
#      - orders server response according to the specified attributes. Default order is +, i.e. ascending
operations: [find, create, replace, update, upsert, delete]
# No specific semantics, but can be used by $ref
definitions:
  dummyDefinition:
    type: object
# Custom property
x-custom: anything
