<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>GraphiQL</title>
  <meta name="robots" content="noindex">
  <style>
    html, body {
      height: 100%;
      margin: 0;
      overflow: hidden;
      width: 100%;
    }
  </style>
  <link href="//cdn.jsdelivr.net/graphiql/0.9.3/graphiql.css" rel="stylesheet">
  <script src="//cdn.jsdelivr.net/fetch/2.0.1/fetch.min.js"></script>
  <script src="//cdn.jsdelivr.net/react/15.4.2/react.min.js"></script>
  <script src="//cdn.jsdelivr.net/react/15.4.2/react-dom.min.js"></script>
  <script src="//cdn.jsdelivr.net/graphiql/0.9.3/graphiql.js"></script>
</head>
<body>
  <script>
    // List of possible query variables
    var possibleSearchVars = ['query', 'variables', 'operationName'];
    // Collect the query variables
    var searchVars = window.location.search.substr(1).split('&');
    var parameters = searchVars.reduce(function (memo, _, searchIndex) {
      var searchVarVal = searchVars[searchIndex];
      var searchTokens = searchVarVal.split('=');
      var searchVar = decodeURIComponent(searchTokens[0]);
      if (!searchVar || possibleSearchVars.indexOf(searchVar) === -1) { return memo; }
      var searchVal = decodeURIComponent(searchTokens.slice(1).join('='));
      memo[searchVar] = searchVal;
      return memo;
    }, {});

    // Produce a Location query string from a parameter object.
    var getFetchURLQuery = function () {
      return '?' + Object.keys(parameters)
        .filter(function (key) { return Boolean(parameters[key]); })
        .map(function (key) {
          return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]);
        }).join('&');
    };

    // Defines a GraphQL fetcher using the fetch API.
    var graphqlFetcher = function (graphqlParams) {
      var fetchURL = {{{endpointURL}}};
      var request = fetch(fetchURL, {
        method: 'post',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(graphqlParams),
        credentials: 'include',
      })
      .then(function (response) {
        return response.text();
      })
      .then(function (responseBody) {
        try {
          return JSON.parse(responseBody);
        } catch (error) {
          return responseBody;
        }
      });
      return request;
    };

    // When the query and variables string is edited, update the URL bar so that it can be easily shared.
    var onEditQuery = function (newQuery) {
      parameters.query = newQuery;
      updateURL();
    };
    var onEditVariables = function (newVariables) {
      parameters.variables = newVariables;
      updateURL();
    };
    var onEditOperationName = function (newOperationName) {
      parameters.operationName = newOperationName;
      updateURL();
    };
    var updateURL = function () {
      window.history.replaceState(null, null, getFetchURLQuery());
    };

    // Render <GraphiQL /> into the body.
    ReactDOM.render(
      React.createElement(GraphiQL, {
        fetcher: graphqlFetcher,
        onEditQuery: onEditQuery,
        onEditVariables: onEditVariables,
        onEditOperationName: onEditOperationName,
        query: {{{query}}},
        variables: {{{variables}}},
        operationName: {{{operationName}}}
      }),
      document.body
    );
  </script>
</body>
</html>
